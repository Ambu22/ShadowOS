<UserControl x:Class="ShadowOS.ShadowLogger"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             xmlns:system = "clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:ShadowOS"
             xmlns:cud="clr-namespace:core.ui.data;assembly=core.ui.data"
             xmlns:cu="clr-namespace:core.ui;assembly=core.ui"
             cud:ViewModelBase.Glue="True">

    <UserControl.DataContext>
        <local:ShadowLoggerViewModel />
    </UserControl.DataContext>

    <UserControl.Resources>
        <SolidColorBrush x:Key="closeColor" Color="#ffc75050" />
        <SolidColorBrush x:Key="windowColor" Color="#ff3665b3" />

        <SolidColorBrush x:Key="selectedColor" Color="Orange" />
        <SolidColorBrush x:Key="invisible" Color="Transparent" />
        <SolidColorBrush x:Key="responseColor" Color="Black" />
        
        <Style TargetType="Button" x:Key="closeButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Margin="0,0,-4,0">
                            <Rectangle x:Name="color" Fill="{StaticResource invisible}" Opacity=".5" />
                            <ContentPresenter Margin="5" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="color" Value="{StaticResource closeColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="Button" x:Key="windowButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Margin="0,0,-4,0">
                            <Rectangle x:Name="color" Fill="{StaticResource invisible}" Opacity=".5" />
                            <ContentPresenter Margin="5" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="color" Value="{StaticResource windowColor}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <local:WindowStateConverter x:Key="windowStateConverter" />
        <local:WindowStateHoverConverter x:Key="windowStateHoverConverter" />
        <local:GrayscaleConverter x:Key="grayscaleConverter" />

        <SolidColorBrush x:Key="sidebarColor" Color="#ffffffff" />
        <SolidColorBrush x:Key="backgroundColor" Color="#fffafafa" />
        <SolidColorBrush x:Key="splitterColor" Color="{StaticResource MainColor}" />

        <SolidColorBrush x:Key="titleColor" Color="{StaticResource MainColor}" />

        <SolidColorBrush x:Key="titleBarColor" Color="#fffafafa" />

        <Style x:Key="blankRadioButton" TargetType="{x:Type RadioButton}">
            <Style.Setters>
                <Setter Property="Template" >
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <ContentPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>
    </UserControl.Resources>

    <Border BorderBrush="Black" BorderThickness="1" Margin="10">
        <Border.Effect>
            <DropShadowEffect Color="Black" BlurRadius="10" ShadowDepth="3" Direction="23" />
        </Border.Effect>

        <Grid>
            <!-- Window -->
            <Grid Background="{StaticResource backgroundColor}" local:WindowHelper.ToggleMaximize="true">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <!-- Window Title Bar -->
                <Grid Grid.Row="0" Background="{StaticResource titleBarColor}" local:WindowHelper.Drag="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Foreground="{StaticResource titleColor}" Text="ShadowOS" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Medium" Grid.Column="1" Margin="5" />

                    <StackPanel HorizontalAlignment="Right" Grid.Column="3" Orientation="Horizontal" Margin="0,0,4,0">
                        <local:FlatButton Command="{Binding MinimizeCommand}" VerticalAlignment="Top" Image="Images\26\custom\minimize.png" HoverImage="Images\26\custom\minimizeselected.png" Color="Transparent" HoverColor="{StaticResource windowColor}" />
                        <local:FlatButton Command="{Binding MaximizeCommand}" VerticalAlignment="Top" 
                                      Image="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState, Converter={StaticResource windowStateConverter}}" 
                                      HoverImage="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState, Converter={StaticResource windowStateHoverConverter}}" Color="Transparent" HoverColor="{StaticResource windowColor}" />
                        <local:FlatButton Command="{Binding CloseCommand}" VerticalAlignment="Top" Image="Images\26\custom\close.png" HoverImage="Images\26\custom\closeselected.png" Color="Transparent" HoverColor="{StaticResource closeColor}" />
                    </StackPanel>

                    <Grid Grid.Column="3" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <Grid>
                            <Grid.Resources>
                                <SolidColorBrush x:Key="menuHoverFill" Color="White" />
                                <SolidColorBrush x:Key="menuHoverBorder" Color="#ffdcdcdc" />
                                <SolidColorBrush x:Key="menuSelectedFill" Color="White" />
                                <SolidColorBrush x:Key="menuSelectedBorder" Color="#FFa8a9aa" />
                            </Grid.Resources>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>

                            <ToggleButton HorizontalAlignment="Right" Margin="0,0,5,5" x:Name="toggleMenu" IsChecked="{Binding IsMenuOpen}">
                                <ToggleButton.Resources>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="highlight" BorderThickness="0,1,0,0" Margin="0,0,0,0">
                                                        <Border x:Name="background" Padding="8,3,8,4" BorderThickness="1" CornerRadius="2" Margin="0">
                                                            <Grid>
                                                                <Image x:Name="menu" Source="Images\menu.png" Height="20" Width="16" />
                                                                <Image x:Name="selectedmenu" Source="Images\selectedmenu.png" Height="20" Width="16" Visibility="Collapsed" />
                                                            </Grid>
                                                        </Border>
                                                    </Border>

                                                    <ControlTemplate.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True" />
                                                                <Condition Property="IsChecked" Value="False" />
                                                            </MultiTrigger.Conditions>

                                                            <Setter TargetName="background" Property="Background" Value="{StaticResource menuHoverFill}" />
                                                            <Setter TargetName="background" Property="BorderBrush" Value="{StaticResource menuHoverBorder}" />
                                                        </MultiTrigger>

                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter TargetName="background" Property="Background" Value="{StaticResource menuSelectedFill}" />
                                                            <Setter TargetName="background" Property="BorderBrush" Value="{StaticResource menuSelectedBorder}" />

                                                            <Setter TargetName="menu" Property="Visibility" Value="Collapsed" />
                                                            <Setter TargetName="selectedmenu" Property="Visibility" Value="Visible" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Resources>
                            </ToggleButton>

                            <Rectangle x:Name="popupplacementpoint" Height="1" VerticalAlignment="Bottom" Fill="{StaticResource invisible}" Width="200" HorizontalAlignment="Right" Margin="0,0,7,5" />
                        </Grid>
                    </Grid>
                    
                </Grid>

                <!-- Window Content -->
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="auto" />
                    </Grid.RowDefinitions>

                    <!-- Tabs -->
                    <Grid Grid.Column="0" Background="{StaticResource sidebarColor}" Grid.IsSharedSizeScope="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <RadioButton Style="{StaticResource blankRadioButton}" Grid.Row="0" IsChecked="{Binding IsWeb}">
                            <local:ShadowTab TitleText="WEB REQUESTS" IsSelected="{Binding IsWeb}" EventCount="{Binding Web.Requests.ViewSource.Count}"
                                     UnselectedImage="Images\Experience\48\cloud.png" SelectedImage="Images\Experience\48\selectedcloud.png"/>
                        </RadioButton>

                        <RadioButton Style="{StaticResource blankRadioButton}" Grid.Row="1" IsChecked="{Binding IsFile}">
                            <local:ShadowTab TitleText="FILE ACCESS" IsSelected="{Binding IsFile}" EventCount="{Binding FileSystem.Files.ViewSource.Count}"
                                     UnselectedImage="Images\Experience\48\folder.png" SelectedImage="Images\Experience\48\selectedfolder.png"/>
                        </RadioButton>

                        <RadioButton Style="{StaticResource blankRadioButton}" Grid.Row="2" IsChecked="{Binding IsSql}">
                            <local:ShadowTab TitleText="SQL LITE" IsSelected="{Binding IsSql}" EventCount="{Binding Database.Transactions.ViewSource.Count}"
                                     UnselectedImage="Images\Experience\48\database.png" SelectedImage="Images\Experience\48\selecteddatabase.png"/>
                        </RadioButton>

                        <StackPanel Grid.Row="3" Orientation="Vertical" VerticalAlignment="Bottom">
                            <local:ShadowMainButton TitleText="OPEN" Command="{Binding OpenCommand}" Visibility="{Binding ShowOpen, Converter={StaticResource visibility}}" />
                            <local:ShadowMainButton TitleText="CLEAR EVENTS" Command="{Binding ClearCommand}" />
                            <local:ShadowMainButton TitleText="INSTALL APP" Command="{Binding InstallCommand}" />
                            <local:ShadowMainButton TitleText="START EMULATOR" Command="{Binding StartCommand}" />
                            
                        </StackPanel>
                    </Grid>

                    <!-- Tab Content -->
                    <Grid Grid.Column="1" Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        
                        <Rectangle Fill="{StaticResource sidebarColor}" Height="5" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" />
                        
                        <!-- Web Tab Content -->
                        <Grid Visibility="{Binding IsWeb, Converter={StaticResource visibility}}" Grid.Row="1" Grid.Column="1">
                            <Grid.Resources>
                                <ResourceDictionary Source="BlackListViewResources.xaml" />
                            </Grid.Resources>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="300" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Rectangle Fill="{StaticResource invisible}" Grid.Column="0" x:Name="WebColumn" />

                            <ListView Grid.Column="0" ItemsSource="{Binding Web.Requests.ViewSource}" SelectedItem="{Binding Web.SelectedRequest}" AlternationCount="2" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                <ListView.Resources>
                                    <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
                                        <Setter Property="cu:Touch.Click" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.Web.Requests.SortCommand}" />
                                    </Style>
                                </ListView.Resources>

                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Event}">
                                            <GridViewColumnHeader>
                                                <TextBlock>EVENT</TextBlock>
                                            </GridViewColumnHeader>
                                            
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Event}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="{Binding ActualWidth, ElementName=WebColumn}" DisplayMemberBinding="{Binding Host}">
                                            <GridViewColumnHeader>
                                                <TextBlock>HOST</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Host}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>

                            <GridSplitter Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Stretch" ShowsPreview="True" Width="7">
                                <GridSplitter.Style>
                                    <Style TargetType="{x:Type GridSplitter}">
                                        <Setter Property="Background" Value="{StaticResource invisible}" />
                                        <Setter Property="Opacity" Value=".5" />
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource splitterColor}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </GridSplitter.Style>
                            </GridSplitter>

                            <Border Grid.Column="2" BorderBrush="{StaticResource invisible}" Background="{StaticResource invisible}" BorderThickness="0,1,0,0">
                                <cu:SyntaxEditor IsReadyOnly="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SyntaxLanguage="HTTPRequest" Text="{Binding Web.SelectedRequest.Request, Mode=TwoWay}" Margin="5,0,5,0" Padding="0,5,3,3" />
                                <!--<TextBox FontSize="14" IsReadOnly="True" Text="{Binding Web.SelectedRequest.Request, Mode=OneWay}" Background="{StaticResource invisible}" Foreground="{StaticResource responseColor}" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" BorderThickness="0" BorderBrush="{StaticResource invisible}" Margin="5,0,5,0" Padding="0,5,3,3" TextWrapping="Wrap"/>--> 
                            </Border>
                        </Grid>

                        <!-- File Tab Content -->
                        <Grid Visibility="{Binding IsFile, Converter={StaticResource visibility}}" Grid.Row="1" Grid.Column="1">
                            <Grid.Resources>
                                <ResourceDictionary Source="BlackGridViewResources.xaml" />
                            </Grid.Resources>

                            <ListView BorderBrush="{StaticResource invisible}" Background="{StaticResource invisible}" AlternationCount="2" SelectedItem="{Binding FileSystem.SelectedFile}" ItemsSource="{Binding FileSystem.Files.ViewSource}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                                        <Setter Property="cu:Touch.DoubleClick" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.FileSystem.OpenCommand}" />
                                    </Style>
                                </ListView.ItemContainerStyle>

                                <ListView.Resources>
                                    <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
                                        <Setter Property="cu:Touch.Click" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.FileSystem.Files.SortCommand}" />
                                    </Style>
                                </ListView.Resources>

                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Event}">
                                            <GridViewColumnHeader>
                                                <TextBlock>EVENT</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Event}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="90" DisplayMemberBinding="{Binding Mode}">
                                            <GridViewColumnHeader>
                                                <TextBlock>MODE</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Mode}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="120" DisplayMemberBinding="{Binding Path}">
                                            <GridViewColumnHeader>
                                                <TextBlock>PATH</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Path}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>

                        <!-- Sql Tab Content -->
                        <Grid Visibility="{Binding IsSql, Converter={StaticResource visibility}}" Grid.Row="1" Grid.Column="1">
                            <Grid.Resources>
                                <ResourceDictionary Source="BlackGridViewResources.xaml" />
                            </Grid.Resources>

                            <ListView BorderBrush="{StaticResource invisible}" Background="{StaticResource invisible}" AlternationCount="2" SelectedItem="{Binding Database.SelectedTransaction}" ItemsSource="{Binding Database.Transactions.ViewSource}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                                        <Setter Property="cu:Touch.DoubleClick" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.Database.OpenCommand}" />
                                    </Style>
                                </ListView.ItemContainerStyle>

                                <ListView.Resources>
                                    <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
                                        <Setter Property="cu:Touch.Click" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.Database.Transactions.SortCommand}" />
                                    </Style>
                                </ListView.Resources>

                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Width="60" DisplayMemberBinding="{Binding Event}">
                                            <GridViewColumnHeader>
                                                <TextBlock>EVENT</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Event}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="90" DisplayMemberBinding="{Binding Action}">
                                            <GridViewColumnHeader>
                                                <TextBlock>ACTION</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Action}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="120" DisplayMemberBinding="{Binding Value}">
                                            <GridViewColumnHeader>
                                                <TextBlock>VALUE</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Value}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                        
                                        <GridViewColumn Width="120" DisplayMemberBinding="{Binding Parameters}">
                                            <GridViewColumnHeader>
                                                <TextBlock>PARAMETERS</TextBlock>
                                            </GridViewColumnHeader>

                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding Parameters}" />
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>
                    </Grid>

                    <!-- Footer -->
                    <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2">
                        <Rectangle Fill="{StaticResource sidebarColor}" Height="16" />

                        <Thumb VerticalAlignment="Bottom" HorizontalAlignment="Right" local:ThumbHelper.Resize="true">
                            <Thumb.Style>
                                <Style TargetType="Thumb">
                                    <Setter Property="Cursor" Value="SizeNWSE" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Thumb">
                                                <Image Source="Images\gripper.png" Height="12" Width="12" Cursor="SizeNWSE" Opacity=".8" Margin="0,0,3,3"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Grid>
                    
                    
                </Grid>
            </Grid>

            <!-- Popup -->
            <Canvas x:Name="popupLayer" Background="{StaticResource invisible}" Visibility="{Binding IsMenuOpen, Converter={StaticResource visibility}}" cu:Touch.Click="{Binding ClosePopup}">

                <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Canvas.Left="0" Canvas.Right="0" local:CanvasHelper.Position="{Binding ElementName=popupplacementpoint}">
                    <Grid.Resources>
                        <SolidColorBrush Color="#FFfefefe" x:Key="menuBG" />
                        <SolidColorBrush Color="#FFa8a9aa" x:Key="menuHighLight" />
                        <SolidColorBrush x:Key="menuFill" Color="#FFf3f3f3" />
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" BorderThickness="1" BorderBrush="{StaticResource menuHighLight}" Margin="0,-1,0,0">
                        <StackPanel Background="{StaticResource menuBG}" Width="200">
                            <!--<local:ShadowMenuGroup TitleText="File" />

                            <local:ShadowMenuItem TitleText="File Item One ..." Command="{Binding FileMenu1}" />
                            <local:ShadowMenuItem TitleText="File Item Two ..." Command="{Binding FileMenu2}" />
                            <local:ShadowMenuItem TitleText="File Item Three ..." Command="{Binding FileMenu3}" />

                            <local:ShadowMenuGroup TitleText="Edit" />

                            <local:ShadowMenuItem TitleText="Edit Item One ..." Command="{Binding EditMenu1}" />
                            <local:ShadowMenuItem TitleText="Edit Item Two ..." Command="{Binding EditMenu2}" />
                            <local:ShadowMenuItem TitleText="Edit Item Three ..." Command="{Binding EditMenu3}" />-->

                            <local:ShadowMenuGroup TitleText="Tools" />

                            <!--<local:ShadowMenuItem TitleText="Install ..." Command="{Binding ToolsMenu1}" /> -->
                            <local:ShadowMenuItem TitleText="Clear All ..." Command="{Binding ToolsMenu2}" />
                            <!--<local:ShadowMenuItem TitleText="Tools Item Three ..." Command="{Binding ToolsMenu3}" />-->

                            <local:ShadowMenuGroup TitleText="Help" />

                            <local:ShadowMenuItem TitleText="About ..." Command="{Binding AboutMenu1}" />
                        </StackPanel>
                    </Border>

                    <Grid Height="13" Width="25" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" Margin="0,0,5,0">
                        <Path Stretch="Fill" Stroke="{StaticResource menuHighLight}" StrokeThickness="1" Fill="{StaticResource menuFill}" Data="M 1,1 0,0 -1,1" />
                        <Path Stretch="Fill" StrokeThickness="1" Stroke="{StaticResource menuFill}" Data="M 0,0 1,0" VerticalAlignment="Bottom" Margin="1,0,1,0" />
                    </Grid>
                </Grid>
            </Canvas>

            <!-- Wait animation -->
            <Grid Background="Transparent" Visibility="{Binding IsWaiting, Converter={StaticResource visibility}}">
                <Border BorderBrush="Black">
                    <Border.Effect>
                        <DropShadowEffect Color="Black" BlurRadius="10" ShadowDepth="3" Direction="23" />
                    </Border.Effect>
                    
                    <Grid Height="100" Width="400" Background="White">
                        <Grid.Resources>
                            <!-- Particle Styling -->
                            <SolidColorBrush x:Key = "ParticleColor" Color = "{StaticResource MainColor}"/>
                            <SolidColorBrush x:Key = "ParticleBackgroundColor" Color = "Transparent"/>
                            <system:Double x:Key = "ParticleOpacity">1</system:Double>
                            <system:Double x:Key = "ParticleRadius">5</system:Double>

                            <system:Double x:Key = "StartingPointX">0</system:Double>
                            <system:Double x:Key = "StartingPointY">-20</system:Double>

                            <system:Double x:Key = "RotationPointX">.5</system:Double>
                            <system:Double x:Key = "RotationPointY">.5</system:Double>

                            <!-- StoryBoard -->
                            <system:TimeSpan x:Key = "StoryBoardBeginTimeP0">00:00:00.000</system:TimeSpan>
                            <system:TimeSpan x:Key = "StoryBoardBeginTimeP1">00:00:00.100</system:TimeSpan>
                            <system:TimeSpan x:Key = "StoryBoardBeginTimeP2">00:00:00.200</system:TimeSpan>
                            <system:TimeSpan x:Key = "StoryBoardBeginTimeP3">00:00:00.300</system:TimeSpan>
                            <system:TimeSpan x:Key = "StoryBoardBeginTimeP4">00:00:00.400</system:TimeSpan>
                            <Duration x:Key = "StoryBoardDuration">00:00:01.800</Duration>

                            <!-- Particle Origin Angles -->
                            <system:Double x:Key = "ParticleOriginAngleP0">0</system:Double>
                            <system:Double x:Key = "ParticleOriginAngleP1">-10</system:Double>
                            <system:Double x:Key = "ParticleOriginAngleP2">-20</system:Double>
                            <system:Double x:Key = "ParticleOriginAngleP3">-30</system:Double>
                            <system:Double x:Key = "ParticleOriginAngleP4">-40</system:Double>

                            <!-- Particle Position & Timing 1 -->
                            <system:Double x:Key = "ParticleBeginAngle1">0</system:Double>
                            <system:Double x:Key = "ParticleEndAngle1">90</system:Double>
                            <system:TimeSpan x:Key = "ParticleBeginTime1">00:00:00.000</system:TimeSpan>
                            <Duration x:Key = "ParticleDuration1">00:00:00.750</Duration>

                            <!-- Particle Position & Timing 2 -->
                            <system:Double x:Key = "ParticleBeginAngle2">90</system:Double>
                            <system:Double x:Key = "ParticleEndAngle2">270</system:Double>
                            <system:TimeSpan x:Key = "ParticleBeginTime2">00:00:00.751</system:TimeSpan>
                            <Duration x:Key = "ParticleDuration2">00:00:00.300</Duration>

                            <!-- Particle Position & Timing 3 -->
                            <system:Double x:Key = "ParticleBeginAngle3">270</system:Double>
                            <system:Double x:Key = "ParticleEndAngle3">360</system:Double>
                            <system:TimeSpan x:Key = "ParticleBeginTime3">00:00:01.052</system:TimeSpan>
                            <Duration x:Key = "ParticleDuration3">00:00:00.750</Duration>

                            <Style x:Key = "EllipseStyle" TargetType = "Ellipse">
                                <Setter Property = "Width" Value = "{StaticResource ParticleRadius}"/>
                                <Setter Property = "Height" Value = "{StaticResource ParticleRadius}"/>
                                <Setter Property = "Fill" Value = "{StaticResource ParticleColor}"/>
                                <Setter Property = "RenderTransformOrigin" Value = "0.5, 0.5"/>
                                <Setter Property = "Opacity" Value = "{StaticResource ParticleOpacity}"/>
                            </Style>
                        </Grid.Resources>
                        
                        <TextBlock Text="{Binding WaitingMessage}" FontSize="20" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="30,0,0,0" Foreground="{StaticResource titleColor}"/>
                        
                        <Canvas Width = "10" Height = "10" HorizontalAlignment="Right" Margin="0,0,50,0">
                            <Canvas.Triggers>
                                <EventTrigger RoutedEvent = "Canvas.Loaded">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard BeginTime = "{StaticResource StoryBoardBeginTimeP0}" Duration = "{StaticResource StoryBoardDuration}" RepeatBehavior = "Forever">
                                                <DoubleAnimation Storyboard.TargetName = "p0" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle1}" To = "{StaticResource ParticleEndAngle1}"
                                                    BeginTime = "{StaticResource ParticleBeginTime1}" Duration = "{StaticResource ParticleDuration1}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p0" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle2}" To = "{StaticResource ParticleEndAngle2}"
                                                    BeginTime = "{StaticResource ParticleBeginTime2}" Duration = "{StaticResource ParticleDuration2}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p0" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle3}" To = "{StaticResource ParticleEndAngle3}"
                                                    BeginTime = "{StaticResource ParticleBeginTime3}" Duration = "{StaticResource ParticleDuration3}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                        <BeginStoryboard>
                                            <Storyboard BeginTime = "{StaticResource StoryBoardBeginTimeP1}" Duration = "{StaticResource StoryBoardDuration}" RepeatBehavior = "Forever">
                                                <DoubleAnimation Storyboard.TargetName = "p1" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle1}" To = "{StaticResource ParticleEndAngle1}"
                                                    BeginTime = "{StaticResource ParticleBeginTime1}" Duration = "{StaticResource ParticleDuration1}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p1" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle2}" To = "{StaticResource ParticleEndAngle2}"
                                                    BeginTime = "{StaticResource ParticleBeginTime2}" Duration = "{StaticResource ParticleDuration2}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p1" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle3}" To = "{StaticResource ParticleEndAngle3}"
                                                    BeginTime = "{StaticResource ParticleBeginTime3}" Duration = "{StaticResource ParticleDuration3}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                        <BeginStoryboard>
                                            <Storyboard BeginTime = "{StaticResource StoryBoardBeginTimeP2}" Duration = "{StaticResource StoryBoardDuration}" RepeatBehavior = "Forever">
                                                <DoubleAnimation Storyboard.TargetName = "p2" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle1}" To = "{StaticResource ParticleEndAngle1}"
                                                    BeginTime = "{StaticResource ParticleBeginTime1}" Duration = "{StaticResource ParticleDuration1}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p2" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle2}" To = "{StaticResource ParticleEndAngle2}"
                                                    BeginTime = "{StaticResource ParticleBeginTime2}" Duration = "{StaticResource ParticleDuration2}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p2" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle3}" To = "{StaticResource ParticleEndAngle3}"
                                                    BeginTime = "{StaticResource ParticleBeginTime3}" Duration = "{StaticResource ParticleDuration3}"/>
                                            </Storyboard>
                                        </BeginStoryboard>

                                        <BeginStoryboard>
                                            <Storyboard BeginTime = "{StaticResource StoryBoardBeginTimeP3}" Duration = "{StaticResource StoryBoardDuration}" RepeatBehavior = "Forever">
                                                <DoubleAnimation Storyboard.TargetName = "p3" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle1}" To = "{StaticResource ParticleEndAngle1}"
                                                    BeginTime = "{StaticResource ParticleBeginTime1}" Duration = "{StaticResource ParticleDuration1}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p3" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle2}" To = "{StaticResource ParticleEndAngle2}"
                                                    BeginTime = "{StaticResource ParticleBeginTime2}" Duration = "{StaticResource ParticleDuration2}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p3" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle3}" To = "{StaticResource ParticleEndAngle3}"
                                                    BeginTime = "{StaticResource ParticleBeginTime3}" Duration = "{StaticResource ParticleDuration3}"/>
                                            </Storyboard>
                                        </BeginStoryboard>

                                        <BeginStoryboard>
                                            <Storyboard BeginTime = "{StaticResource StoryBoardBeginTimeP4}" Duration = "{StaticResource StoryBoardDuration}" RepeatBehavior = "Forever">
                                                <DoubleAnimation Storyboard.TargetName = "p4" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle1}" To = "{StaticResource ParticleEndAngle1}"
                                                    BeginTime = "{StaticResource ParticleBeginTime1}" Duration = "{StaticResource ParticleDuration1}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p4" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle2}" To = "{StaticResource ParticleEndAngle2}"
                                                    BeginTime = "{StaticResource ParticleBeginTime2}" Duration = "{StaticResource ParticleDuration2}"/>
                                                <DoubleAnimation Storyboard.TargetName = "p4" Storyboard.TargetProperty = "(UIElement.RenderTransform).(RotateTransform.Angle)"
                                                    From = "{StaticResource ParticleBeginAngle3}" To = "{StaticResource ParticleEndAngle3}"
                                                    BeginTime = "{StaticResource ParticleBeginTime3}" Duration = "{StaticResource ParticleDuration3}"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </Canvas.Triggers>

                            <Border x:Name = "p0" Background = "{StaticResource ParticleBackgroundColor}" Opacity = "{StaticResource ParticleOpacity}">
                                <Border.RenderTransform>
                                    <RotateTransform/>
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X = "{StaticResource RotationPointX}" Y = "{StaticResource RotationPointY}"/>
                                </Border.RenderTransformOrigin>
                                <Ellipse Style = "{StaticResource EllipseStyle}">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform X = "{StaticResource StartingPointX}" Y = "{StaticResource StartingPointY}"/>
                                            <RotateTransform Angle = "{StaticResource ParticleOriginAngleP0}"/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <Border x:Name = "p1" Background = "{StaticResource ParticleBackgroundColor}" Opacity = "{StaticResource ParticleOpacity}">
                                <Border.RenderTransform>
                                    <RotateTransform/>
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X = "{StaticResource RotationPointX}" Y = "{StaticResource RotationPointY}"/>
                                </Border.RenderTransformOrigin>
                                <Ellipse Style = "{StaticResource EllipseStyle}">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform X = "{StaticResource StartingPointX}" Y = "{StaticResource StartingPointY}"/>
                                            <RotateTransform Angle = "{StaticResource ParticleOriginAngleP1}"/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <Border x:Name = "p2" Background = "{StaticResource ParticleBackgroundColor}" Opacity = "{StaticResource ParticleOpacity}">
                                <Border.RenderTransform>
                                    <RotateTransform/>
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X = "{StaticResource RotationPointX}" Y = "{StaticResource RotationPointY}"/>
                                </Border.RenderTransformOrigin>
                                <Ellipse Style = "{StaticResource EllipseStyle}">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform X = "{StaticResource StartingPointX}" Y = "{StaticResource StartingPointY}"/>
                                            <RotateTransform Angle = "{StaticResource ParticleOriginAngleP2}"/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <Border x:Name = "p3" Background = "{StaticResource ParticleBackgroundColor}" Opacity = "{StaticResource ParticleOpacity}">
                                <Border.RenderTransform>
                                    <RotateTransform/>
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X = "{StaticResource RotationPointX}" Y = "{StaticResource RotationPointY}"/>
                                </Border.RenderTransformOrigin>
                                <Ellipse Style = "{StaticResource EllipseStyle}">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform X = "{StaticResource StartingPointX}" Y = "{StaticResource StartingPointY}"/>
                                            <RotateTransform Angle = "{StaticResource ParticleOriginAngleP3}"/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>
                            <Border x:Name = "p4" Background = "{StaticResource ParticleBackgroundColor}" Opacity = "{StaticResource ParticleOpacity}">
                                <Border.RenderTransform>
                                    <RotateTransform/>
                                </Border.RenderTransform>
                                <Border.RenderTransformOrigin>
                                    <Point X = "{StaticResource RotationPointX}" Y = "{StaticResource RotationPointY}"/>
                                </Border.RenderTransformOrigin>
                                <Ellipse Style = "{StaticResource EllipseStyle}">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform X = "{StaticResource StartingPointX}" Y = "{StaticResource StartingPointY}"/>
                                            <RotateTransform Angle = "{StaticResource ParticleOriginAngleP4}"/>
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Border>

                        </Canvas>
                    </Grid>
                </Border>
            </Grid>

        </Grid>
    </Border>
</UserControl>
